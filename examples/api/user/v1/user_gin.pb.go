// Code generated by protoc-gen-go-gin. DO NOT EDIT."

package v1

import (
	context "context"
	gin "github.com/gin-gonic/gin"
	metadata "google.golang.org/grpc/metadata"
	http "net/http"
)

// context.
// gin.
// http.
// metadata.

type UserHTTPServer interface {
	GetInfo(context.Context, *UserRequest) (*UserReply, error)
	GetInfo2(context.Context, *UserRequest) (*UserReply, error)
	GetInfo3(context.Context, *UserRequest) (*UserReply, error)
}

func RegisterUserHTTPServer(router gin.IRouter, srv UserHTTPServer) {
	router.GET("/v1/user/info", func(ctx *gin.Context) {
		var in UserRequest

		if err := ctx.ShouldBindQuery(&in); err != nil {
			return
		}

		md := metadata.New(nil)
		for k, v := range ctx.Request.Header {
			md.Set(k, v...)
		}
		newCtx := metadata.NewIncomingContext(ctx, md)

		out, err := srv.GetInfo(newCtx, &in)
		if err != nil {
			return
		}

		ctx.PureJSON(http.StatusOK, out)
	})

	router.GET("/v1/user/info/:id/*action", func(ctx *gin.Context) {
		var in UserRequest

		if err := ctx.ShouldBindUri(&in); err != nil {
			return
		}

		if err := ctx.ShouldBindQuery(&in); err != nil {
			return
		}

		md := metadata.New(nil)
		for k, v := range ctx.Request.Header {
			md.Set(k, v...)
		}
		newCtx := metadata.NewIncomingContext(ctx, md)

		out, err := srv.GetInfo2(newCtx, &in)
		if err != nil {
			return
		}

		ctx.PureJSON(http.StatusOK, out)
	})

	router.POST("/v1/user/info/:id", func(ctx *gin.Context) {
		var in UserRequest

		if err := ctx.ShouldBindUri(&in); err != nil {
			return
		}

		if err := ctx.ShouldBindJSON(&in); err != nil {
			return
		}

		md := metadata.New(nil)
		for k, v := range ctx.Request.Header {
			md.Set(k, v...)
		}
		newCtx := metadata.NewIncomingContext(ctx, md)

		out, err := srv.GetInfo3(newCtx, &in)
		if err != nil {
			return
		}

		ctx.PureJSON(http.StatusOK, out)
	})

}
