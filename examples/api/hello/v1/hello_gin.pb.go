// Code generated by protoc-gen-go-gin. DO NOT EDIT."

package v1

import (
	context "context"
	errors "errors"
	gin "github.com/gin-gonic/gin"
	metadata "google.golang.org/grpc/metadata"
	http "net/http"
)

// context.
// gin.
// errors.
// http.
// metadata.

type HelloHTTPServer interface {
}

type defaultHelloResp struct{}

func (resp defaultHelloResp) Response(ctx *gin.Context, httpStatus int, code int, message string, data interface{}) {
	body := &struct {
		Code    int         `json:"code"`
		Message string      `json:"msg"`
		Data    interface{} `json:"data"`
	}{
		Code:    code,
		Message: message,
		Data:    data,
	}
	ctx.PureJSON(httpStatus, body)
}

func (resp defaultHelloResp) Error(ctx *gin.Context, err error) {
	httpStatus := 500
	code := -1
	message := "未知错误"

	type iResponse interface {
		HttpStatus() int
		Code() int
		Message() string
	}

	var iResp iResponse
	if err != nil {
		if errors.As(err, &iResp) {
			httpStatus = iResp.HttpStatus()
			code = iResp.Code()
			message = iResp.Message()
		} else {
			message += ";" + err.Error()
		}
	} else {
		message += "; err is nil"
	}
	_ = ctx.Error(err)
	resp.Response(ctx, httpStatus, code, message, nil)
}

// ParamsError 参数错误
func (resp defaultHelloResp) ParamsError(ctx *gin.Context, err error) {
	_ = ctx.Error(err)
	resp.Response(ctx, 400, 40001, err.Error(), nil)
}

func (resp defaultHelloResp) Success(ctx *gin.Context, data interface{}) {
	resp.Response(ctx, http.StatusOK, 10000, "OK", data)
}

type HelloController struct {
	service HelloHTTPServer
	router  gin.IRouter
	resp    interface {
		Error(ctx *gin.Context, err error)
		ParamsError(ctx *gin.Context, err error)
		Success(ctx *gin.Context, data interface{})
	}
}

func (c *HelloController) RegisterService() {
}

func RegisterHelloHTTPServer(router gin.IRouter, srv HelloHTTPServer) {
	c := &HelloController{
		service: srv,
		router:  router,
		resp:    defaultHelloResp{},
	}
	c.RegisterService()
}
